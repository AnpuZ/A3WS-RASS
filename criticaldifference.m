function cd = criticaldifference(s,labels,alpha)
%%%%%%%%%%%%%%%%
% 下面给出函数的输入要求
% 第一个输入s，代表各个算法的性能排序矩阵。
% 下面给出一个示例：如果现在一共有4个算法，实验了5个数据集，那么s应该是一个4X5的矩阵。
% 例如：s=[1 1 2 1 3
%          2 2 1 3 2
%          3 1 3 2 1
%          4 3 4 4 4]'；
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 需要注意在输入s的时候，矩阵后面需要加一个转置符号！！！ %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% s中第i行代表第i个算法，每j列代表第j个数据集下各个算法的性能排名。如果性能一致则可以设置排名一致，例如在s中第2列中算法1和算法3的性能排名便相同。
% 第二个输入labels，代表的是算法的命名。
% 有几个算法就要设置几个命名，需要注意的是，这里的命名需要和你输入的s矩阵的顺序一样，s矩阵中第1行代表的算法则在labels中第1个设置，以此类推。
% 下面给出一个示例（继续上一个示例）：labels={'A','B','C','D'}
% 第三个输入alpha，代表的是显著水平α的取值，一共有三个取值选项：0.01、0.05、0.1。输入时alpha只能在这三个取值当中选择即可。
%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%
% 测试数据如下：
% s=[4	3	7	4	6	2	6	4	2	4	4	1	3	1	4	7	7	5	5	7	5
%    5	5	3	1	7	3	3	6	5	5	1	3	7	7	7	6	3	2	2	4	3
%    7	7	6	6	3	6	4	3	6	7	6	7	4	6	6	3	5	6	6	6	6
%    6	6	2	7	4	7	7	5	7	6	7	6	6	5	5	5	6	7	7	5	7
%    1	4	5	5	5	1	5	7	4	3	5	5	5	4	3	2	2	3	4	3	4
%    2	1	4	1	1	5	1	1	3	1	3	4	1	3	1	4	1	3	3	1	2
%    2	1	1	1	1	4	1	1	1	1	2	2	2	2	1	1	4	1	1	2	1]'
% labels={'GBNRS','SemiFREE','SMRMRI','MSFR','MFEFS','GMSFS','LMSFS'}
% alpha=0.05
%Time = [2	2	1	4	7	6	7	4	3	5	1	6	2	3	3
%        3	4	4	7	3	3	4	7	6	3	6	3	5	7	4
%        5	6	6	6	6	5	6	1	7	6	7	7	7	6	7
%        7	7	7	2	5	7	2	6	2	7	5	5	3	5	6
%        6	5	5	5	4	4	5	5	5	4	3	2	4	4	5
%        4	3	3	3	2	2	3	3	4	2	4	4	6	2	2
%        1	1	2	1	1	1	1	2	1	1	2	1	1	1	1]'
%RF = [4.0 	7.0 	3.0 	1.0 	5.0 	4.0 	4.0 	6.0 	4.0 	7.0 	7.0 	3.0 	5.0 	7.0 	6.0 
%      3.0 	4.0 	6.0 	3.0 	4.0 	3.0 	6.0 	4.0 	6.0 	6.0 	3.0 	4.0 	3.0 	6.0 	2.0 
%      6.0 	6.0 	5.0 	6.0 	7.0 	6.0 	5.0 	7.0 	5.0 	3.0 	5.0 	6.0 	7.0 	4.0 	7.0 
%      7.0 	3.0 	7.0 	7.0 	6.0 	7.0 	7.0 	5.0 	7.0 	1.0 	6.0 	7.0 	6.0 	5.0 	4.0 
%      5.0 	5.0 	4.0 	2.0 	2.0 	5.0 	3.0 	3.0 	2.0 	5.0 	4.0 	5.0 	4.0 	2.0 	5.0 
%      1.5 	1.0 	2.0 	4.0 	3.0 	1.0 	2.0 	1.0 	3.0 	2.0 	2.0 	2.0 	1.5 	3.0 	1.0 
%      1.5 	2.0 	1.0 	5.0 	1.0 	2.0 	1.0 	2.0 	1.0 	4.0 	1.0 	1.0 	1.5 	1.0 	3.0 ]'
%KNN = [2.0 	7.0 	7.0 	4.0 	5.0 	4.0 	2.0 	4.0 	4.0 	7.0 	7.0 	1.5 	4.0 	7.0 	4.0 
%       5.0 	4.0 	6.0 	3.0 	2.0 	3.0 	6.0 	6.0 	6.0 	6.0 	4.0 	3.0 	3.0 	2.0 	3.0 
%       7.0 	6.0 	3.5 	6.0 	7.0 	7.0 	5.0 	7.0 	5.0 	5.0 	5.0 	6.0 	6.0 	6.0 	7.0 
%       6.0 	3.0 	3.5 	7.0 	6.0 	5.0 	6.0 	5.0 	7.0 	2.0 	6.0 	7.0 	7.0 	3.0 	6.0 
%       1.0 	5.0 	5.0 	2.0 	2.0 	6.0 	4.0 	2.0 	1.0 	4.0 	2.0 	4.0 	5.0 	5.0 	5.0 
%       3.5 	1.0 	1.5 	5.0 	4.0 	1.0 	3.0 	3.0 	2.5 	3.0 	1.0 	5.0 	1.5 	1.0 	1.5 
%       3.5 	2.0 	1.5 	1.0 	1.0 	2.0 	1.0 	1.0 	2.5 	1.0 	3.0 	1.5 	1.5 	4.0 	1.5 ]'
%SVM = [4.0 	7.0 	6.0 	2.0 	6.0 	4.0 	2.0 	4.0 	3.0 	7.0 	7.0 	5.0 	5.0 	7.0 	5.0 
%       5.0 	3.0 	7.0 	3.0 	3.0 	6.0 	5.0 	5.0 	7.0 	6.0 	3.0 	2.0 	2.0 	4.0 	3.0 
%       7.0 	6.0 	3.0 	6.0 	4.0 	3.0 	6.0 	7.0 	4.0 	3.0 	5.0 	6.0 	6.0 	6.0 	6.0 
%       6.0 	2.0 	4.0 	7.0 	7.0 	5.0 	7.0 	6.0 	6.0 	5.0 	6.0 	7.0 	7.0 	5.0 	7.0 
%       1.0 	5.0 	5.0 	1.0 	5.0 	7.0 	4.0 	3.0 	5.0 	2.0 	2.0 	3.5 	4.0 	3.0 	4.0 
%       2.5 	4.0 	1.5 	5.0 	1.5 	1.5 	3.0 	1.5 	1.0 	4.0 	1.0 	3.5 	3.0 	1.0 	2.0 
%       2.5 	1.0 	1.5 	4.0 	1.5 	1.5 	1.0 	1.5 	2.0 	1.0 	4.0 	1.0 	1.0 	2.0 	1.0 ]'


%%%%%%%%%%%%%%%%%%%%

    if nargin < 3
        alpha = 0.1;
    end

    % convert scores into ranks
    [N,k] = size(s);
    [S,r] = sort(s');
    idx   = k*repmat(0:N-1, k, 1)' + r';
    R     = repmat(1:k, N, 1);
    S     = S';

    for i=1:N
        for j=1:k
             index    = S(i,j) == S(i,:);
             R(i,index) = mean(R(i,index));
        end
    end

    r(idx)  = R;
    r       = r';

    % compute critical difference
    if alpha == 0.01
        qalpha = [0.000 2.576 2.913 3.113 3.255 3.364 3.452 3.526 3.590 3.646 ...
        3.696 3.741 3.781 3.818 3.853 3.884 3.914 3.941 3.967 3.992 ...
        4.015 4.037 4.057 4.077 4.096 4.114 4.132 4.148 4.164 4.179 ...
        4.194 4.208 4.222 4.236 4.249 4.261 4.273 4.285 4.296 4.307 ...
        4.318 4.329 4.339 4.349 4.359 4.368 4.378 4.387 4.395 4.404 ...
        4.412 4.420 4.428 4.435 4.442 4.449 4.456 ];
    
    elseif alpha == 0.05
        qalpha = [0.000 1.960 2.344 2.569 2.728 2.850 2.948 3.031 3.102 3.164 ...
        3.219 3.268 3.313 3.354 3.391 3.426 3.458 3.489 3.517 3.544 ...
        3.569 3.593 3.616 3.637 3.658 3.678 3.696 3.714 3.732 3.749 ...
        3.765 3.780 3.795 3.810 3.824 3.837 3.850 3.863 3.876 3.888 ...
        3.899 3.911 3.922 3.933 3.943 3.954 3.964 3.973 3.983 3.992 ...
        4.001 4.009 4.017 4.025 4.032 4.040 4.046];
    
    elseif alpha == 0.1
        qalpha = [0.000 1.645 2.052 2.291 2.460 2.589 2.693 2.780 2.855 2.920 ...
        2.978 3.030 3.077 3.120 3.159 3.196 3.230 3.261 3.291 3.319 ...
        3.346 3.371 3.394 3.417 3.439 3.459 3.479 3.498 3.516 3.533 ...
        3.550 3.567 3.582 3.597 3.612 3.626 3.640 3.653 3.666 3.679 ...
        3.691 3.703 3.714 3.726 3.737 3.747 3.758 3.768 3.778 3.788 ...
        3.797 3.806 3.814 3.823 3.831 3.838 3.846];
    
    else
        error('alpha must be 0.01, 0.05 or 0.1');
    end
    cd = qalpha(k)*sqrt(k*(k+1)/(6*N));

    disp(alpha)
    disp(qalpha(k))
    disp(k)
    disp(N)
    disp(r)
    disp(cd)

    figure(1);
    clf
    axis off
    axis([-0.2 1.2 -20 140]);
    axis xy
    tics = repmat((0:(k-1))/(k-1), 3, 1);
    line(tics(:), repmat([100, 101, 100], 1, k), 'LineWidth', 1.5, 'Color', 'k');
    line([0 0 0 cd/(k-1) cd/(k-1) cd/(k-1)], [113 111 112 112 111 113], 'LineWidth', 1, 'Color', 'r');
    text(0.03, 116, ['Critical Distance=' num2str(cd)], 'FontSize', 12, 'HorizontalAlignment', 'left', 'Color', 'r'); 
      
    for i=1:k
        text((i-1)/(k-1), 105, num2str(k-i+1), 'FontSize', 12, 'HorizontalAlignment', 'center');
    end

    % compute average ranks
    r       = mean(r);
    [r,idx] = sort(r);
    disp(r)
    % compute statistically similar cliques
    clique           = repmat(r,k,1) - repmat(r',1,k);
    clique(clique<0) = realmax;
    clique           = clique < cd;

    for i=k:-1:2
        if all(clique(i-1,clique(i,:))==clique(i,clique(i,:)))
            clique(i,:) = 0;
        end
    end

    n                = sum(clique,2);
    clique           = clique(n>1,:);
    n                = size(clique,1);


    b=linspace(0,1,k);
    % labels displayed on the right
    for i=1:ceil(k/2)
        line([(k-r(i))/(k-1) (k-r(i))/(k-1) 1], [100 100-3*(n+1)-10*i 100-3*(n+1)-10*i], 'Color', [0 0 b(i)]);
        text(1.02, 100 - 3*(n+1) - 10*i, labels{idx(i)}, 'FontSize', 12, 'VerticalAlignment', 'middle', 'HorizontalAlignment', 'left', 'Color', [0 0 b(i)]);
    end

    % labels displayed on the left
    for i=ceil(k/2)+1:k
        line([(k-r(i))/(k-1) (k-r(i))/(k-1) 0], [100 100-3*(n+1)-10*(k-i+1) 100-3*(n+1)-10*(k-i+1)], 'Color', [0 0 b(i)]);
        text(-0.02, 100 - 3*(n+1) -10*(k-i+1), labels{idx(i)}, 'FontSize', 12, 'VerticalAlignment', 'middle', 'HorizontalAlignment', 'right', 'Color', [0 0 b(i)]);
    end

    % group cliques of statistically similar classifiers
    for i=1:size(clique,1)
        R = r(clique(i,:));
        line([((k-min(R))/(k-1)) ((k-min(R))/(k-1)) ((k-min(R))/(k-1)) ((k - max(R))/(k-1)) ((k - max(R))/(k-1)) ((k - max(R))/(k-1))], [100+1-5*i 100-1-5*i 100-5*i 100-5*i 100-1-5*i 100+1-5*i], 'LineWidth', 1, 'Color', 'r');
    end

    
    
